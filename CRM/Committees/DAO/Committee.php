<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.graydigitalgroup.committees/xml/schema/CRM/Committees/Committee.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:eef3ccab48c9a2973dfe54246f0a7252)
 */
use CRM_Committees_ExtensionUtil as E;

/**
 * Database access object for the Committee entity.
 */
class CRM_Committees_DAO_Committee extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_committee';

  /**
   * Field to show when displaying a record.
   *
   * @var string
   */
  public static $_labelField = 'name';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Paths for accessing this entity in the UI.
   *
   * @var string[]
   */
  protected static $_paths = [
    'add' => 'civicrm/committee/manage',
    'edit' => 'civicrm/committee/manage#?Committee=[id]',
    'delete' => 'civicrm/committee/manage?reset=1&action=delete&id=[id]',
  ];

  /**
   * Unique Committee ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Committee Name (e.g. Communications)
   *
   * @var string
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $name;

  /**
   * Brief summary of the committee. Text and html allowed. Displayed on Committee pages to describe what this committee is.
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $summary;

  /**
   * Activities for the committee. Text and html allowed. Displayed on Committee pages to denote the activities involved with this committee.
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $activities;

  /**
   * Community name on HigherLogic.
   *
   * @var string
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $hl_community;

  /**
   * Is this committee enabled?
   *
   * @var bool|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_active;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_committee';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Committees') : E::ts('Committee');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique Committee ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_committee.id',
          'table_name' => 'civicrm_committee',
          'entity' => 'Committee',
          'bao' => 'CRM_Committees_DAO_Committee',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'name' => [
          'name' => 'name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Committee Name'),
          'description' => E::ts('Committee Name (e.g. Communications)'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_committee.name',
          'export' => TRUE,
          'table_name' => 'civicrm_committee',
          'entity' => 'Committee',
          'bao' => 'CRM_Committees_DAO_Committee',
          'localizable' => 1,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Title"),
          ],
          'add' => NULL,
        ],
        'summary' => [
          'name' => 'summary',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Committee Summary'),
          'description' => E::ts('Brief summary of the committee. Text and html allowed. Displayed on Committee pages to describe what this committee is.'),
          'rows' => 4,
          'cols' => 60,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_committee.summary',
          'table_name' => 'civicrm_committee',
          'entity' => 'Committee',
          'bao' => 'CRM_Committees_DAO_Committee',
          'localizable' => 1,
          'html' => [
            'type' => 'TextArea',
            'label' => E::ts("Summary"),
          ],
          'add' => NULL,
        ],
        'activities' => [
          'name' => 'activities',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Committee Activities'),
          'description' => E::ts('Activities for the committee. Text and html allowed. Displayed on Committee pages to denote the activities involved with this committee.'),
          'rows' => 4,
          'cols' => 60,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_committee.activities',
          'table_name' => 'civicrm_committee',
          'entity' => 'Committee',
          'bao' => 'CRM_Committees_DAO_Committee',
          'localizable' => 1,
          'html' => [
            'type' => 'TextArea',
            'label' => E::ts("Activities"),
          ],
          'add' => NULL,
        ],
        'hl_community' => [
          'name' => 'hl_community',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('HL Community'),
          'description' => E::ts('Community name on HigherLogic.'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_committee.hl_community',
          'export' => TRUE,
          'table_name' => 'civicrm_committee',
          'entity' => 'Committee',
          'bao' => 'CRM_Committees_DAO_Committee',
          'localizable' => 1,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("HL Community"),
          ],
          'add' => NULL,
        ],
        'is_active' => [
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Committee Is Active'),
          'description' => E::ts('Is this committee enabled?'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_committee.is_active',
          'default' => '0',
          'table_name' => 'civicrm_committee',
          'entity' => 'Committee',
          'bao' => 'CRM_Committees_DAO_Committee',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return CRM_Core_DAO::getLocaleTableName(self::$_tableName);
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'committee', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'committee', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
